import TestPhases.oneForkedJvmPerTest
import uk.gov.hmrc.DefaultBuildSettings.{addTestReportOption, defaultSettings, scalaSettings, targetJvm}
import uk.gov.hmrc.sbtdistributables.SbtDistributablesPlugin.publishingSettings
import sbt.Keys._
import sbt._
import scoverage.ScoverageKeys
import uk.gov.hmrc.sbtdistributables.SbtDistributablesPlugin
import scala.util.matching.Regex

val appName = "bc-passengers-frontend"


lazy val microservice = Project(appName, file("."))
  .enablePlugins(play.sbt.PlayScala, SbtDistributablesPlugin, SbtWeb)
  .disablePlugins(sbt.plugins.JUnitXmlReportPlugin)
  .settings(
    libraryDependencies ++= AppDependencies.compile ++ AppDependencies.test,
    retrieveManaged := true
  )
  .settings(
    pipelineStages := Seq(digest)
  )
  .settings(scalaSettings: _*)
  .settings(scalaVersion := "2.12.12")
  .settings(publishingSettings: _*)
  .settings(defaultSettings(): _*)
  .settings(silencerSettings)
  .settings( majorVersion := 1 )
  .settings(
    targetJvm := "jvm-1.8",
    parallelExecution in Test := false,
    fork in Test := false
  )
  .settings(
    ScoverageKeys.coverageExcludedFiles := "<empty>;Reverse.*;.*filters.*;.*handlers.*;.*components.*;.*repositories.*;" +
      ".*BuildInfo.*;.*javascript.*;.*FrontendAuditConnector.*;.*Routes.*;.*GuiceInjector;" +
      ".*ControllerConfiguration;.*LocalLanguageController;.*testonly.*;",
    ScoverageKeys.coverageMinimum := 80
  )
  .configs(IntegrationTest)
  .settings(
    inConfig(IntegrationTest)(Defaults.itSettings),
    Keys.fork in IntegrationTest := false,
    unmanagedSourceDirectories in IntegrationTest := (baseDirectory in IntegrationTest) (base => Seq(base / "it")).value,
    addTestReportOption(IntegrationTest, "int-test-reports"),
    testGrouping in IntegrationTest := oneForkedJvmPerTest((definedTests in IntegrationTest).value),
    parallelExecution in IntegrationTest := false,
    routesImport ++= Seq("binders.Binders._", "models._")
  )
  .settings(resolvers += Resolver.jcenterRepo)
  .settings(resolvers += Resolver.typesafeRepo("releases"))

lazy val silencerSettings: Seq[Setting[_]] = {

  val paramValueNeverUsed: Regex = """^(parameter value)(.*)(is never used)$""".r
  val unusedImports: Regex = """^(Unused import*)$""".r

  val silencerVersion = "1.7.0"
  Seq(
    libraryDependencies ++= Seq(
      compilerPlugin("com.github.ghik" % "silencer-plugin" % silencerVersion cross CrossVersion.full),
      "com.github.ghik" % "silencer-lib" % silencerVersion % Provided cross CrossVersion.full
    ),
    // silence warnings on autogenerated files
    scalacOptions += "-P:silencer:pathFilters=target/.*",
    // silence implicit parameter value is never used warnings
    scalacOptions += s"-P:silencer:globalFilters=$paramValueNeverUsed",
    scalacOptions += s"-P:silencer:globalFilters=$unusedImports",
    // exclude warnings for the project directories, i.e. make builds reproducible
    scalacOptions += s"-P:silencer:sourceRoots=${baseDirectory.value.getCanonicalPath}"
  )
}
TwirlKeys.templateImports ++= Seq(
  "play.twirl.api.HtmlFormat",
  "uk.gov.hmrc.govukfrontend.views.html.components._",
  "uk.gov.hmrc.govukfrontend.views.html.helpers._",
  "views.ViewUtils._",
  "controllers.routes._"
)
Concat.groups := Seq(
  "javascripts/application.js" ->
    group(Seq(
      "lib/govuk-frontend/govuk/all.js",
      "javascripts/jquery.min.js",
      "javascripts/app.js",
      "javascripts/autocomplete.js"
    ))
)
pipelineStages in Assets := Seq(concat, uglify)
includeFilter in uglify := GlobFilter("application.js")
